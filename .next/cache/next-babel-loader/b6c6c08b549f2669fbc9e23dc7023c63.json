{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/morteza/Codes/bimnet/with-redux-persist-app/components/data-list.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { loadExampleData, loadingExampleDataFailure } from '../store';\n\nclass DataList extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      isDataLoading: false\n    });\n  }\n\n  componentDidMount() {\n    const {\n      loadExampleData,\n      loadingExampleDataFailure\n    } = this.props;\n    const self = this;\n    this.setState({\n      isDataLoading: true\n    });\n    window.fetch('https://jsonplaceholder.typicode.com/users').then(function (response) {\n      if (response.status !== 200) {\n        console.log('Looks like there was a problem. Status Code: ' + response.status);\n        loadingExampleDataFailure();\n        self.setState({\n          isDataLoading: false\n        });\n        return;\n      }\n\n      response.json().then(function (data) {\n        loadExampleData(data);\n        self.setState({\n          isDataLoading: false\n        });\n      });\n    }).catch(function (err) {\n      console.log('Fetch Error :-S', err);\n      loadingExampleDataFailure();\n      self.setState({\n        isDataLoading: false\n      });\n    });\n  }\n\n  render() {\n    const {\n      exampleData,\n      error\n    } = this.props;\n    const {\n      isDataLoading\n    } = this.state;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, \"API DATA:\"), exampleData && !isDataLoading ? React.createElement(\"pre\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, React.createElement(\"code\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, _JSON$stringify(exampleData, null, 2))) : React.createElement(\"p\", {\n      style: {\n        color: 'blue'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, \"Loading...\"), error && React.createElement(\"p\", {\n      style: {\n        color: 'red'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, \"Error fetching data.\"));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  const {\n    exampleData,\n    error\n  } = state;\n  return {\n    exampleData,\n    error\n  };\n}\n\nconst mapDispatchToProps = dispatch => bindActionCreators({\n  loadExampleData,\n  loadingExampleDataFailure\n}, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DataList);","map":{"version":3,"sources":["/Users/morteza/Codes/bimnet/with-redux-persist-app/components/data-list.js"],"names":["React","Component","connect","bindActionCreators","loadExampleData","loadingExampleDataFailure","DataList","isDataLoading","componentDidMount","props","self","setState","window","fetch","then","response","status","console","log","json","data","catch","err","render","exampleData","error","state","color","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,kBAAT,QAAmC,OAAnC;AACA,SAASC,eAAT,EAA0BC,yBAA1B,QAA2D,UAA3D;;AAEA,MAAMC,QAAN,SAAuBL,SAAvB,CAAiC;AAAA;AAAA;;AAAA,mCACvB;AACNM,MAAAA,aAAa,EAAE;AADT,KADuB;AAAA;;AAK/BC,EAAAA,iBAAiB,GAAI;AACnB,UAAM;AAAEJ,MAAAA,eAAF;AAAmBC,MAAAA;AAAnB,QAAiD,KAAKI,KAA5D;AACA,UAAMC,IAAI,GAAG,IAAb;AAEA,SAAKC,QAAL,CAAc;AAAEJ,MAAAA,aAAa,EAAE;AAAjB,KAAd;AACAK,IAAAA,MAAM,CACHC,KADH,CACS,4CADT,EAEGC,IAFH,CAEQ,UAAUC,QAAV,EAAoB;AACxB,UAAIA,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AAC3BC,QAAAA,OAAO,CAACC,GAAR,CACE,kDAAkDH,QAAQ,CAACC,MAD7D;AAGAX,QAAAA,yBAAyB;AACzBK,QAAAA,IAAI,CAACC,QAAL,CAAc;AAAEJ,UAAAA,aAAa,EAAE;AAAjB,SAAd;AACA;AACD;;AACDQ,MAAAA,QAAQ,CAACI,IAAT,GAAgBL,IAAhB,CAAqB,UAAUM,IAAV,EAAgB;AACnChB,QAAAA,eAAe,CAACgB,IAAD,CAAf;AACAV,QAAAA,IAAI,CAACC,QAAL,CAAc;AAAEJ,UAAAA,aAAa,EAAE;AAAjB,SAAd;AACD,OAHD;AAID,KAfH,EAgBGc,KAhBH,CAgBS,UAAUC,GAAV,EAAe;AACpBL,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BI,GAA/B;AACAjB,MAAAA,yBAAyB;AACzBK,MAAAA,IAAI,CAACC,QAAL,CAAc;AAAEJ,QAAAA,aAAa,EAAE;AAAjB,OAAd;AACD,KApBH;AAqBD;;AAEDgB,EAAAA,MAAM,GAAI;AACR,UAAM;AAAEC,MAAAA,WAAF;AAAeC,MAAAA;AAAf,QAAyB,KAAKhB,KAApC;AACA,UAAM;AAAEF,MAAAA;AAAF,QAAoB,KAAKmB,KAA/B;AAEA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,EAEGF,WAAW,IAAI,CAACjB,aAAhB,GACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAO,gBAAeiB,WAAf,EAA4B,IAA5B,EAAkC,CAAlC,CAAP,CADF,CADD,GAKC;AAAG,MAAA,KAAK,EAAE;AAAEG,QAAAA,KAAK,EAAE;AAAT,OAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAPJ,EASGF,KAAK,IAAI;AAAG,MAAA,KAAK,EAAE;AAAEE,QAAAA,KAAK,EAAE;AAAT,OAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BATZ,CADF;AAaD;;AAlD8B;;AAqDjC,SAASC,eAAT,CAA0BF,KAA1B,EAAiC;AAC/B,QAAM;AAAEF,IAAAA,WAAF;AAAeC,IAAAA;AAAf,MAAyBC,KAA/B;AACA,SAAO;AAAEF,IAAAA,WAAF;AAAeC,IAAAA;AAAf,GAAP;AACD;;AACD,MAAMI,kBAAkB,GAAGC,QAAQ,IACjC3B,kBAAkB,CAAC;AAAEC,EAAAA,eAAF;AAAmBC,EAAAA;AAAnB,CAAD,EAAiDyB,QAAjD,CADpB;;AAGA,eAAe5B,OAAO,CACpB0B,eADoB,EAEpBC,kBAFoB,CAAP,CAGbvB,QAHa,CAAf","sourcesContent":["import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { loadExampleData, loadingExampleDataFailure } from '../store'\n\nclass DataList extends Component {\n  state = {\n    isDataLoading: false\n  }\n\n  componentDidMount () {\n    const { loadExampleData, loadingExampleDataFailure } = this.props\n    const self = this\n\n    this.setState({ isDataLoading: true })\n    window\n      .fetch('https://jsonplaceholder.typicode.com/users')\n      .then(function (response) {\n        if (response.status !== 200) {\n          console.log(\n            'Looks like there was a problem. Status Code: ' + response.status\n          )\n          loadingExampleDataFailure()\n          self.setState({ isDataLoading: false })\n          return\n        }\n        response.json().then(function (data) {\n          loadExampleData(data)\n          self.setState({ isDataLoading: false })\n        })\n      })\n      .catch(function (err) {\n        console.log('Fetch Error :-S', err)\n        loadingExampleDataFailure()\n        self.setState({ isDataLoading: false })\n      })\n  }\n\n  render () {\n    const { exampleData, error } = this.props\n    const { isDataLoading } = this.state\n\n    return (\n      <div>\n        <h1>API DATA:</h1>\n        {exampleData && !isDataLoading ? (\n          <pre>\n            <code>{JSON.stringify(exampleData, null, 2)}</code>\n          </pre>\n        ) : (\n          <p style={{ color: 'blue' }}>Loading...</p>\n        )}\n        {error && <p style={{ color: 'red' }}>Error fetching data.</p>}\n      </div>\n    )\n  }\n}\n\nfunction mapStateToProps (state) {\n  const { exampleData, error } = state\n  return { exampleData, error }\n}\nconst mapDispatchToProps = dispatch =>\n  bindActionCreators({ loadExampleData, loadingExampleDataFailure }, dispatch)\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(DataList)\n"]},"metadata":{},"sourceType":"module"}